const { test, after, beforeEach } = require("node:test");
const assert = require("node:assert");
const mongoose = require("mongoose");
const supertest = require("supertest");
const app = require("../app");
const api = supertest(app);
const blogs = require("../db");
const Blog = require("../models/blog");

const initialNotes = blogs;

beforeEach(async () => {
  await Blog.deleteMany({});
  const noteObjects = initialNotes.map((blog) => new Blog(blog));
  const promiseArray = noteObjects.map((blog) => blog.save());
  await Promise.all(promiseArray);
});

test("all notes are returned", async () => {
  const response = await api.get("/api/blogs");
  assert.strictEqual(response.body.length, initialNotes.length);
});

test("blog posts have a unique identifier property named id", async () => {
  const response = await api.get("/api/blogs");
  const blog = response.body[0];
  assert.strictEqual(typeof blog.id, "string");
  assert.strictEqual(blog._id, undefined); // Ensure `_id` is undefined
});

test("POST successfully creates a new blog post", async () => {
  const newblog = {
    title: "Test Blog",
    author: "John Doe",
    url: "http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html",
    likes: 123,
  };
  const resultBlog = await api
    .post("/api/blogs")
    .send(newblog)
    .expect(201)
    .expect("Content-Type", /application\/json/);

  const savedBlog = resultBlog.body;

  const response = await api.get("/api/blogs");
  const blogsAtEnd = response.body;
  assert.strictEqual(blogsAtEnd.length, blogs.length + 1);
  const expectedBlog = {
    ...newblog,
    id: savedBlog.id, // Add the id field since it's autogenerated
  };
  assert.deepStrictEqual(savedBlog, expectedBlog);
});

test("if the likes property is missing,the value 0", async () => {
  const newblog = {
    title: "Test Blog",
    author: "John Doe",
    url: "http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html",
  };
  const resultBlog = await api
    .post("/api/blogs")
    .send(newblog)
    .expect(201)
    .expect("Content-Type", /application\/json/);

  assert.strictEqual(resultBlog.body.likes, 0);
});

test("fails with status 400 if title is missing", async () => {
  const newBlog = {
    author: "John Doe",
    url: "http://example.com/missingtitle",
    likes: 5,
  };
  await api
    .post("/api/blogs")
    .send(newBlog)
    .expect(400)
    .expect("Content-Type", /application\/json/);
});
test("fails with status 400 if url is missing", async () => {
  const newBlog = {
    title: "Blog testing ",
    author: "John Doe",
    likes: 5,
  };
  await api
    .post("/api/blogs")
    .send(newBlog)
    .expect(400)
    .expect("Content-Type", /application\/json/);
});

test.only("deleting a Blog is succesful", async () => {
  const blogs = await Blog.find({});
  const blogsAtStart = blogs.map((note) => note.toJSON());
  const blogToDelete = blogsAtStart[0];

  await api.delete(`/api/blogs/${blogToDelete.id}`).expect(204);

  const blogsAtEnd = await Blog.find({});
  const blogIdsAtEnd = blogsAtEnd.map((blog) => blog.id);
  assert.notStrictEqual(blogIdsAtEnd.includes(blogToDelete.id), true);
});

test("can update the number of likes for a Blog", async () => {
  const blogsAtStart = await Blog.find({});
  const blogToUpdate = blogsAtStart[0];
  const updatedBlog = await api
    .put(`/api/blogs/${blogToUpdate.id}`)
    .send({ likes: blogToUpdate.likes })
    .expect(200)
    .expect("Content-Type", /application\/json/);

  const blogsAtEnd = await Blog.find({});
  const updatedBlogAtEnd = blogsAtEnd.find((b) => b.id === updatedBlog.body.id);
  assert.strictEqual(updatedBlogAtEnd.likes, blogToUpdate.likes + 1);
  assert.strictEqual(blogsAtStart.length, blogsAtEnd.length);
});

after(async () => {
  await mongoose.connection.close();
});
